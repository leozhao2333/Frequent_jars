/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package org.milyn.edi.unedifact.d17a.ORDCHG;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import org.milyn.edi.unedifact.d17a.common.RCSRequirementsAndConditions;    
import java.util.List;    
import org.milyn.edi.unedifact.d17a.common.RFFReference;    
import org.milyn.edi.unedifact.d17a.common.DTMDateTimePeriod;    
import org.milyn.edi.unedifact.d17a.common.FTXFreeText;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class SegmentGroup26 implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private RCSRequirementsAndConditions rCSRequirementsAndConditions;
    private List<RFFReference> rFFReference;
    private List<DTMDateTimePeriod> dTMDateTimePeriod;
    private List<FTXFreeText> fTXFreeText;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(rCSRequirementsAndConditions != null) {
            nodeWriter.write("RCS");
            nodeWriter.write(delimiters.getField());
            rCSRequirementsAndConditions.write(nodeWriter, delimiters);
        }
        if(rFFReference != null && !rFFReference.isEmpty()) {
            for(RFFReference rFFReferenceInst : rFFReference) {
                nodeWriter.write("RFF");
                nodeWriter.write(delimiters.getField());
                rFFReferenceInst.write(nodeWriter, delimiters);
            }
        }
        if(dTMDateTimePeriod != null && !dTMDateTimePeriod.isEmpty()) {
            for(DTMDateTimePeriod dTMDateTimePeriodInst : dTMDateTimePeriod) {
                nodeWriter.write("DTM");
                nodeWriter.write(delimiters.getField());
                dTMDateTimePeriodInst.write(nodeWriter, delimiters);
            }
        }
        if(fTXFreeText != null && !fTXFreeText.isEmpty()) {
            for(FTXFreeText fTXFreeTextInst : fTXFreeText) {
                nodeWriter.write("FTX");
                nodeWriter.write(delimiters.getField());
                fTXFreeTextInst.write(nodeWriter, delimiters);
            }
        }
    }

    public RCSRequirementsAndConditions getRCSRequirementsAndConditions() {
        return rCSRequirementsAndConditions;
    }

    public SegmentGroup26 setRCSRequirementsAndConditions(RCSRequirementsAndConditions rCSRequirementsAndConditions) {
        this.rCSRequirementsAndConditions = rCSRequirementsAndConditions;  return this;
    }

    public List<RFFReference> getRFFReference() {
        return rFFReference;
    }

    public SegmentGroup26 setRFFReference(List<RFFReference> rFFReference) {
        this.rFFReference = rFFReference;  return this;
    }

    public List<DTMDateTimePeriod> getDTMDateTimePeriod() {
        return dTMDateTimePeriod;
    }

    public SegmentGroup26 setDTMDateTimePeriod(List<DTMDateTimePeriod> dTMDateTimePeriod) {
        this.dTMDateTimePeriod = dTMDateTimePeriod;  return this;
    }

    public List<FTXFreeText> getFTXFreeText() {
        return fTXFreeText;
    }

    public SegmentGroup26 setFTXFreeText(List<FTXFreeText> fTXFreeText) {
        this.fTXFreeText = fTXFreeText;  return this;
    }
}